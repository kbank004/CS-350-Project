<?xml version="1.0" encoding="UTF-8"?>
<pmd xmlns="http://pmd.sourceforge.net/report/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pmd.sourceforge.net/report/2.0.0 http://pmd.sourceforge.net/report_2_0_0.xsd" version="6.36.0" timestamp="2021-12-06T04:42:59.078">
<file name="C:\Users\galex\OneDrive\Dev\School\CS-350-Project\src\itest\java\edu\odu\cs\cs350\DupDetector\IntegrationTest.java">
<violation beginline="1" endline="1" begincolumn="9" endcolumn="36" rule="PackageCase" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#packagecase" priority="3">
Package name contains upper case characters
</violation>
<violation beginline="9" endline="9" begincolumn="1" endcolumn="27" rule="UnusedImports" ruleset="Best Practices" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_bestpractices.html#unusedimports" priority="4">
Unused import 'java.util.ArrayList'
</violation>
<violation beginline="13" endline="39" begincolumn="8" endcolumn="1" rule="CommentRequired" ruleset="Documentation" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_documentation.html#commentrequired" priority="3">
Class comments are required
</violation>
<violation beginline="13" endline="39" begincolumn="8" endcolumn="1" rule="AtLeastOneConstructor" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#atleastoneconstructor" priority="3">
Each class should declare at least one constructor
</violation>
<violation beginline="14" endline="14" begincolumn="24" endcolumn="64" rule="CommentRequired" ruleset="Documentation" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_documentation.html#commentrequired" priority="3">
Field comments are required
</violation>
<violation beginline="14" endline="14" begincolumn="29" endcolumn="36" rule="VariableNamingConventions" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" variable="dataPath" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#variablenamingconventions" priority="1">
Variables that are final and static should be all capitals, 'dataPath' is not all capitals.
</violation>
<violation beginline="16" endline="16" begincolumn="34" endcolumn="44" rule="MethodArgumentCouldBeFinal" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="getDataPath" variable="path" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#methodargumentcouldbefinal" priority="3">
Parameter 'path' is not assigned and could be declared final
</violation>
<violation beginline="16" endline="18" begincolumn="17" endcolumn="3" rule="UnnecessaryModifier" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="getDataPath" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on method 'getDataPath': private methods cannot be overridden
</violation>
<violation beginline="21" endline="38" begincolumn="16" endcolumn="3" rule="CommentRequired" ruleset="Documentation" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_documentation.html#commentrequired" priority="3">
Public method and constructor comments are required
</violation>
<violation beginline="23" endline="23" begincolumn="7" endcolumn="89" rule="LocalVariableCouldBeFinal" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal" priority="3">
Local variable 'args' could be declared final
</violation>
<violation beginline="23" endline="23" begincolumn="29" endcolumn="59" rule="LawOfDemeter" ruleset="Design" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_design.html#lawofdemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="23" endline="23" begincolumn="62" endcolumn="88" rule="LawOfDemeter" ruleset="Design" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_design.html#lawofdemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="24" endline="24" begincolumn="7" endcolumn="50" rule="LocalVariableCouldBeFinal" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal" priority="3">
Local variable 'nSuggestions' could be declared final
</violation>
<violation beginline="25" endline="25" begincolumn="7" endcolumn="90" rule="LocalVariableCouldBeFinal" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal" priority="3">
Local variable 'filePaths' could be declared final
</violation>
<violation beginline="27" endline="27" begincolumn="7" endcolumn="64" rule="LocalVariableCouldBeFinal" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal" priority="3">
Local variable 'dup' could be declared final
</violation>
<violation beginline="29" endline="29" begincolumn="20" endcolumn="38" rule="LongVariable" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" variable="expectedOutpuBuffer" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#longvariable" priority="3">
Avoid excessively long variable names like expectedOutpuBuffer
</violation>
<violation beginline="29" endline="29" begincolumn="7" endcolumn="77" rule="LocalVariableCouldBeFinal" ruleset="Code Style" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal" priority="3">
Local variable 'expectedOutpuBuffer' could be declared final
</violation>
<violation beginline="29" endline="29" begincolumn="20" endcolumn="38" rule="ConsecutiveLiteralAppends" ruleset="Performance" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" variable="expectedOutpuBuffer" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_performance.html#consecutiveliteralappends" priority="3">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.
</violation>
<violation beginline="29" endline="29" begincolumn="20" endcolumn="38" rule="InsufficientStringBufferDeclaration" ruleset="Performance" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" variable="expectedOutpuBuffer" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_performance.html#insufficientstringbufferdeclaration" priority="3">
StringBuffer has been initialized with size 32, but has at least 61 characters appended.
</violation>
<violation beginline="30" endline="30" begincolumn="34" endcolumn="101" rule="InefficientStringBuffering" ruleset="Performance" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_performance.html#inefficientstringbuffering" priority="3">
Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().
</violation>
<violation beginline="30" endline="30" begincolumn="43" endcolumn="90" rule="LawOfDemeter" ruleset="Design" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_design.html#lawofdemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="30" endline="30" begincolumn="43" endcolumn="90" rule="LawOfDemeter" ruleset="Design" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_design.html#lawofdemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="30" endline="30" begincolumn="33" endcolumn="102" rule="ConsecutiveLiteralAppends" ruleset="Performance" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_performance.html#consecutiveliteralappends" priority="3">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.
</violation>
<violation beginline="30" endline="30" begincolumn="7" endcolumn="103" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="31" endline="31" begincolumn="34" endcolumn="102" rule="InefficientStringBuffering" ruleset="Performance" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_performance.html#inefficientstringbuffering" priority="3">
Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().
</violation>
<violation beginline="31" endline="31" begincolumn="43" endcolumn="92" rule="LawOfDemeter" ruleset="Design" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_design.html#lawofdemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="31" endline="31" begincolumn="43" endcolumn="92" rule="LawOfDemeter" ruleset="Design" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_design.html#lawofdemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="31" endline="31" begincolumn="33" endcolumn="103" rule="ConsecutiveLiteralAppends" ruleset="Performance" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_performance.html#consecutiveliteralappends" priority="3">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.
</violation>
<violation beginline="31" endline="31" begincolumn="7" endcolumn="104" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="32" endline="32" begincolumn="34" endcolumn="100" rule="InefficientStringBuffering" ruleset="Performance" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_performance.html#inefficientstringbuffering" priority="3">
Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().
</violation>
<violation beginline="32" endline="32" begincolumn="43" endcolumn="90" rule="LawOfDemeter" ruleset="Design" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_design.html#lawofdemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="32" endline="32" begincolumn="43" endcolumn="90" rule="LawOfDemeter" ruleset="Design" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_design.html#lawofdemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="34" endline="34" begincolumn="7" endcolumn="16" rule="JUnitAssertionsShouldIncludeMessage" ruleset="Best Practices" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage" priority="3">
JUnit assertions should include a message
</violation>
<violation beginline="35" endline="35" begincolumn="14" endcolumn="22" rule="AvoidCatchingGenericException" ruleset="Design" package="edu.odu.cs.cs350.DupDetector" class="IntegrationTest" method="testDupDetector" externalInfoUrl="https://pmd.github.io/pmd-6.36.0/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<configerror rule="LoosePackageCoupling" msg="No packages or classes specified"/>
</pmd>
