/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id "java"
  id "application"
  id "org.xbib.gradle.plugin.git" version "2.0.0"
  id "org.xbib.gradle.plugin.jflex" version "1.5.0"
  id "org.hidetake.ssh" version "2.10.1"
  id "org.unbroken-dome.test-sets" version "4.0.0"
  id 'edu.odu.cs.report_accumulator' version '1.4' 
  id "pmd"
  id "jacoco"
}

java {
  sourceCompatibility = JavaVersion.toVersion(16)
  targetCompatibility = JavaVersion.toVersion(16)
}

sourceSets {
  main {
    jflex {
      srcDir "src/main/jflex"
    }
    java {
      srcDir "$buildDir/my-generated-sources/jflex"
    }
  }
}

repositories {
  gradlePluginPortal()
  mavenCentral()
  ivy {
    url 'https://www.cs.odu.edu/~zeil/ivyrepo'
  }
}

dependencies {
  // Use JUnit Jupiter API for testing.
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
  testImplementation 'org.hamcrest:hamcrest-library:2.2'
  // Use JUnit Jupiter Engine for testing.
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
  
  implementation 'edu.odu.cs.cs350:sourcedSuffixTrees:1.4'
  implementation 'com.googlecode.concurrent-trees:concurrent-trees:2.6.1'

  //implementation 'edu.odu.cs.zeil:JarNeedsHeap:1.0'
  testCompileOnly 'edu.odu.cs.zeil:JarNeedsHeap:1.0'
}

pmd {
  ignoreFailures = true
  consoleOutput = false
  ruleSets = ["$projectDir/config/pmd/ruleset.xml"]
}

pmdTest.enabled = false

check.dependsOn jacocoTestReport

application {
  // Define the main class for the application.
  mainClass = 'edu.odu.cs.cs350.DupDetector.DupDetector'
}

jar {
  manifest {
    attributes 'Implementation-Title': 'DupDetector',
      'Implementation-Version': '1.0',
      'Main-Class': application.mainClass
  }
  from {
    configurations.runtimeClasspath.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
}

testSets { iTest }

iTest.mustRunAfter test
check.dependsOn iTest

tasks.withType(Test) {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

test {
  ignoreFailures = true
}

iTest {
  ignoreFailures = true
}

run {
  def dataDir = "src/test/data"
  args = ["5", "$dataDir/p.ini", "$dataDir/a.cpp", "$dataDir/b"]
}

task deployReports (dependsOn: ['copyReports']) {
  group = "Reporting"
  description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
  doLast {
    def pagesDir = "$buildDir/gh-pages"
    def grgit = git.open {
      dir = pagesDir + "/.git"
    }
    grgit.add(update: false, patterns: ['reports/', 'docs/'])
    grgit.add(update: true, patterns: ['reports/', 'docs/'])
    grgit.commit {
      message = "Updating web pages"
    }
    grgit.push() // not sure why this refuses to push automatically, but having to manually push is starting to piss me off :)
    grgit.close()
  }
}

task copyReports (dependsOn: ['clonePages', 'reportStats']) {
  doLast {
    // copy {
    //   from "$buildDir/reports"
    //   into "$buildDir/gh-pages/reports"
    // }
    copy {
      from "$buildDir/docs"
      into "$buildDir/gh-pages/docs"
    }
  }
}

task clonePages(dependsOn: ['reports', 'deletePage']) {
  doLast {
    mkdir 'build/gh-pages'
    def thisRepo = rootProject.projectDir.toString()
    def pagesDir = "$buildDir/gh-pages"
    def grgit = git.clone {
      dir = pagesDir
      uri = 'file://' + thisRepo
      bare = false
      refToCheckout = 'gh-pages'
    }
    grgit.checkout {
      branch = 'gh-pages'
    }
    grgit.close()
  }
}

task deletePage(type: Delete) {
  def pagesDir = "$buildDir/gh-pages"
  delete files(pagesDir)
}

task reports (dependsOn: ['test', 'javadoc']) { }

reportStats {
  reportsURL = 'https://kbank004.github.io/CS-350-Project/'
  htmlSourceDir = file('build/reports')  // default value
  reportsDir = file("build/gh-pages/reports") // default value
  buildID = "12345"                  // defaults to current date, but can be any run identifier
}
