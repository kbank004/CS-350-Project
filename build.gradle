/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

buildscript {
  dependencies {
    classpath "com.github.fracpete:rsync4j-all:3.1.2-15"
  }
}

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id 'application'
  // id "org.xbib.gradle.plugin.git" version "2.0.0"
}

java {
  sourceCompatibility = JavaVersion.toVersion(16)
  targetCompatibility = JavaVersion.toVersion(16)
}

repositories {
  // Use JCenter for resolving dependencies.
  mavenCentral()
}

dependencies {
  // Use JUnit Jupiter API for testing.
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
  testImplementation 'org.hamcrest:hamcrest-library:2.2'

  // Use JUnit Jupiter Engine for testing.
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

application {
  // Define the main class for the application.
  mainClass = 'edu.odu.cs.cs350.DupDetector.DupDetector'
}

jar {
  manifest {
    attributes 'Main-Class': application.mainClass
  }
}

run {
  def dataDir = "src/test/data"
  args = ["5", "$dataDir/p.ini", "$dataDir/a.cpp", "$dataDir/a.h", "$dataDir/b"]
}

test {
  ignoreFailures = true
  // Use junit platform for unit tests.
  useJUnitPlatform()
}

task reports(dependsOn: ['test', 'javadoc'])

task copyReports (dependsOn: ['reports']) {
  doLast {
    copy {
      from "$buildDir/reports"
      into "$buildDir/gh-pages/reports"
    }
    copy {
      from "$buildDir/docs"
      into "$buildDir/gh-pages/docs"
    }
  }
}

import com.github.fracpete.rsync4j.RSync;
import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput;

task deploy (dependsOn: "copyReports") {
  doLast {
    def sourceDir = "$buildDir/gh-pages/";
    def destURL = "git@github.com:kbank004/CS-350-Project.git#gh-pages";
    RSync rsync = new RSync()
                  .source(sourceDir)
                  .destination(destURL)
                  .recursive(true)
                  .archive(true)
                  .delete(true)
                  .verbose(true)
                  .rsh("ssh -o IdentitiesOnly=yes");
    ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput();
    output.monitor(rsync.builder());
  }
}

// task deployReports (dependsOn: ['copyReports']) {
//   group = "Reporting"
//   description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
//   doLast {
//     def pagesDir = "$buildDir/gh-pages"
//     def grgit = git.open {
//       dir = pagesDir + "/.git"
//     }
//     grgit.add(update: false, patterns: ['reports/', 'docs/'])
//     grgit.add(update: true, patterns: ['reports/', 'docs/'])
//     grgit.commit {
//       message = "Updating web pages"
//     }
//     grgit.push() // not sure why this refuses to push automatically, but having to manually push is starting to piss me off :)
//     grgit.close()
//   }
// }

// task copyReports (dependsOn: ['clonePages']) {
//   doLast {
//     copy {
//       from "$buildDir/reports"
//       into "$buildDir/gh-pages/reports"
//     }
//     copy {
//       from "$buildDir/docs"
//       into "$buildDir/gh-pages/docs"
//     }
//   }
// }

// task clonePages(dependsOn: ['reports', 'deletePage']) {
//   doLast {
//     mkdir 'build/gh-pages'
//     def thisRepo = rootProject.projectDir.toString()
//     def pagesDir = "$buildDir/gh-pages"
//     def grgit = git.clone {
//       dir = pagesDir
//       uri = 'file://' + thisRepo
//       bare = false
//       refToCheckout = 'gh-pages'
//     }
//     grgit.checkout {
//       branch = 'gh-pages'
//     }
//   }
// }

// task deletePage(type: Delete) {
//   def pagesDir = "$buildDir/gh-pages"
//   delete files(pagesDir)
// }
